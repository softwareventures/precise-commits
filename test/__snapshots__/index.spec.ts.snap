// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@softwareventures/precise-commits main() brand-new-json-file 1`] = `
"{
  "foo": true
}
"
`;

exports[`@softwareventures/precise-commits main() brand-new-jsx-file 1`] = `
"function HelloWorld({greeting = "hello", greeted = '"World"', silent = false, onMouseOver}) {
    if (!greeting) {
        return null;
    }

    // TODO: Don't use random in render
    let num = Math.floor(Math.random() * 1e7)
        .toString()
        .replace(/\\.\\d+/gi, "");

    return (
        <div
            className="HelloWorld"
            title={\`You are visitor number \${num}\`}
            onMouseOver={onMouseOver}
        >
            <strong>{greeting.slice(0, 1).toUpperCase() + greeting.slice(1).toLowerCase()}</strong>
            {greeting.endsWith(",") ? " " : <span style={{color: "\\grey"}}>", "</span>}
            <em>{greeted}</em>
            {silent ? "." : "!"}
        </div>
    );
}
"
`;

exports[`@softwareventures/precise-commits main() changed-line-in-closure 1`] = `
"import {Egg} from "egg";
import {waitFor} from 'wait-for'

const failOnError = error => {
    console.log("got error:", error);
    fail(error);
};

describe("salad sausage", () => {

    it("hats notepad tree", async () => {
        const subscription = repo.findAbc(111, Egg.fromText("nettle"));
        subscription.getSnapshots().subscribe(
            result => {
                console.info("got result: ", result);
                firstResult = result;
            },
            failOnError,
            () => {
                flag = true;
                console.log("finished"); // TODO: winkle ankle cricket
            }
        );
        subscription.getEffects().subscribe(effect => commandEffectsReceived.push(effect));
        return waitFor(() => {
            expect(flag).toBeTruthy();
            expect(firstResult).toBeNull();
            expect(commandEffectsReceived).toBeEmpty();
        }, {timeout: 150});
    });
});
"
`;

exports[`@softwareventures/precise-commits main() empty-javascript-file 1`] = `
"var greeting = "hello";
var audience = "world";
"
`;

exports[`@softwareventures/precise-commits main() formatting-would-affect-total-line-count 1`] = `
"  var untouchedUglyLine     =      10

function myfunc(a, b, c) {
    console.log("blah");
}

var newStatement = true;
"
`;

exports[`@softwareventures/precise-commits main() hunk-marker-in-code 1`] = `
"export function extractLineChangeData(diffData: string) {
    return diffData.match(/@@.*@@/gu);
}"
`;

exports[`@softwareventures/precise-commits main() multiple-updated-lines-javascript-file 1`] = `
"var     untouchedUglyLines1 = ''
function TouchedFunctionSignature({
  greeting = "Hello",
  greeted = '"Mars"',
  silent = false
}) {}
      const newlyAddedUglyLine = true;"
`;

exports[`@softwareventures/precise-commits main() single-updated-line-typescript 1`] = `
"const a = true
const b = true;"
`;

exports[`@softwareventures/precise-commits main() updated-class-body 1`] = `
"class Hatstand {
    constructor(hats) {
        this.hats = hats ?? [];
    }
}
"
`;
